<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="..\CodeGenerators\GenerateAttachedProperty.t4" once="true" #>
<#@ include file="..\CodeGenerators\GenerateClassName.t4" once="true" #>
<# string className = "GridAttachedProperties"; #>
<#@ output extension=".cs" #>
using System;
using System.Windows;
using System.Windows.Controls;

namespace WpfApp1.Extensions
{
<# PushIndent("\t"); #>
<# WriteLine(GenerateClassName(className, ClassFlags.INTERNAL | ClassFlags.STATIC)); #>
{
<# PushIndent("\t"); #>
<# GenerateAttachedPropertyFactoryMethods(className); #>
<# GenerateAttachedProperty("GridMaxRowsProperty", typeof(int), "OnGridMaxRowsPropertyChanged"); #>
<# GenerateAttachedProperty("GridAutoRowCountProperty", typeof(int)); #>
<# GenerateAttachedProperty("GridAutoRowProperty", typeof(bool), "OnGridAutoRowPropertyChanged"); #>
<# GenerateAttachedProperty("GridMaxColumnsProperty", typeof(int), "OnGridMaxColumnsPropertyChanged"); #>
<# GenerateAttachedProperty("GridAutoColumnCountProperty", typeof(int)); #>
<# GenerateAttachedProperty("GridAutoColumnProperty", typeof(bool), "OnGridAutoColumnPropertyChanged"); #>
private static void OnGridMaxRowsPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
{
    if (d is Grid g)
    {
        var t = typeof(int);
        try
        {
            var maxRows = (int)e.NewValue;
            for (var row = 0; row < maxRows; ++row)
            {
                g.RowDefinitions.Add(new RowDefinition());
            }
            SetGridAutoRowCount(g, 0);
        }
        catch (Exception)
        {
        }
    }
}
private static void OnGridAutoRowPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
{
    if (d is FrameworkElement fe)
    {
        if (fe.Parent is Grid g)
        {
            var currentRow = GetGridAutoRowCount(g);
            Grid.SetRow(fe, currentRow);
            SetGridAutoRowCount(g, currentRow + 1);
        }
    }
}

private static void OnGridMaxColumnsPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
{
    if (d is Grid g)
    {
        try
        {
            var maxColumns = (int)e.NewValue;
            for (var row = 0; row < maxColumns; ++row)
            {
                g.ColumnDefinitions.Add(new ColumnDefinition());
            }
        }
        catch (Exception)
        {

        }
    }
}

private static void OnGridAutoColumnPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
{
    if (d is FrameworkElement fe)
    {
        if (fe.Parent is Grid g)
        {
            var currentColumn = GetGridAutoColumnCount(g);
            Grid.SetColumn(fe, currentColumn);
            SetGridAutoColumnCount(g, currentColumn + 1);
        }
    }
}
<# PopIndent(); #>
}
<# PopIndent(); #>
}